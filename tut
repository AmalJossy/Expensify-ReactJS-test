//     "babel-cli": "^6.26.0",
babel src --out-file= presets watch

//    "babel-core": "^6.26.0",
    "babel-loader": "^7.1.2",
for webpack

/*
{
    "presets": [ //for babel-loader
        "env",
        "react"
    ],
    "plugins": [
        "transform-class-properties" // plugins
    ]
}

//    "babel-plugin-transform-class-properties": "^6.24.1",
now set class properties ie functions and variables without explicit this binding or constructors

//    "babel-preset-env": "1.5.2",
    "babel-preset-react": "6.24.1",
    required for babel to work with react

//    "react": "^16.2.0",
    "react-dom": "^16.2.0",
react for webpack, bundling. --> bundle.js

///     "webpack": "^3.10.0",
webpack requires webpack config

/*
module.exports ={
    entry : './src/app.js', // source
    output : {
        path: path.join(__dirname,'public'), //directory
        filename: 'bundle.js' //output
    },
    module : {
        rules:[{ // add babel and scss etc
            loader:'babel-loader', // package
            test: /\.js$/, // files to work with
            exclude: /node_modules/
        }]
    },
    devtool: 'cheap-module-eval-source-map', // source map ie bundle-->app.js mapping of tracebacks
    devServer: {
        contentBase: path.join(__dirname,'public')  // server directory
    }
};
*/

//    "webpack-dev-server": "^2.9.7"
start server, webpack is implicit


//    "css-loader": "^0.28.8",
    "sass-loader": "^6.0.6",
    "style-loader": "^0.19.1",
    "node-sass": "^4.7.2",
 css loaders use rules
 {
            test: /\.s?css$/,
            use: [
                'style-loader',
                'css-loader',
                'sass-loader'
            ]
        }

//    "normalize.css": "^7.0.0",
css reset